package algorithm;


/*
写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。

 */
public class _48_不用加减乘除做加法 {



/**
 * A、知道有这么个事情就行，不用掌握
 * B、题的意思是想让用 位运算 逻辑运算
 *
 *
a、加[不算进位] 相当于 异或 ^
b、计算进位值 相当于 与
c、需要对 加 和 仅进位值 相加。
    那么涉及2个操作
        c1.重复a步骤
        c2.重复b步骤


首先看十进制是如何做的： 5+7=12，三步走
第一步：相加各位的值，不算进位，得到2。
第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。

第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。

同样我们可以用三步走的方式计算二进制值相加： 5-101，7-111
第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。

第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。

第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
     继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。


 */
    public int Add(int num1,int num2) {
        while (num2!=0) {
            int temp = num1^num2;   // temp 是局部变量
            num2 = (num1&num2)<<1;
            num1 = temp;
        }
        return num1;
    }



    //  方法2 你不是人造革，你是真的皮，哈哈
    public int Add2(int num1,int num2) {
        if(num1>0){
            while(num1--!=0)
                num2++;
        }
        else if(num1<0){
            while(num1++!=0)
                num2--;
        }
        return num2;
    }

    //你不仅是真皮,而且是大象皮!
    /*
    但是 好像不准确...
    我竟然还特意去看了看Integer源码😑
        public static int sum(int a, int b) {
        return a + b;
    }
     */
    public int Add3(int num1, int num2) {
        return Integer.sum(num1, num2);
    }
}